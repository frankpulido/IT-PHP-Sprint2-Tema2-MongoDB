use optics

db.createCollection("clients", {
    validator: {
       $jsonSchema: {
          bsonType: "object",
          required: ['client_name', 'client_cellphone', 'client_email', 'client_registered'],
          title: "Client Entry Validation",
          properties: {
            client_name: {bsonType : "string", description: "This field must be a string"},
            client_address: {
              bsonType: "object",
              required: ['postal_code'],
              properties: {
                street_address: {bsonType : "string", description: "This field must be a string"},
                floor_and_apartment: {bsonType : "string", description: "This field must be a string"},
                borough: {
                  bsonType: "string",
                  enum : ["Manhattan", "Brooklyn", "Bronk", "New Jersey", "Other"],
                  description: "Must be a valid cadaster borough"},
                postal_code: {bsonType : "string", description: "This field must be a string"},
                country: {bsonType : "string", description: "This field must be a string"},
                address_notes: {bsonType : "string", description: "This field must be a string used for clients in other states and countries"}
              }
            },
            client_cellphone: {bsonType : "string", description: "This field must be a string"},
            client_email: {bsonType : "string", description: "This field must be a string"},
            client_password: {bsonType : "string", description: "This field must contain at least 10 characters (at least 1 uppercase, 1 lowercase, 1 symbol and 1 number. Don't worry, it will be stored as a hashed string"},
            client_referred_by: {bsonType : "objectId", description: "This must be an existing ID identifier of the client who made the referral"},
            client_graduationL: {bsonType : "double", description: "This field must be a number with two decimal value"},
            client_graduationR: {bsonType : "double", description: "This field must be a number with two decimal value"},
            client_last_graduation_exam: {bsonType : "date", description: "This field must be a valid date"},
            client_registered: {bsonType : "date", description: "This field must be a valid date"},
            last_shoppings: {
              bsonType: "array",
              items:{
                bsonType: "object",
                required: ['brand', 'frame_type', 'frame_colour', 'price', 'orderDate'],
                properties: {
                  brand: {
                    bsonType: "string",
                    enum : ["Rayban", "Kuboraum", "Etnia"],
                    description: "Must be either Rayban, Kuboraum or Etnia"},
                  frame_type: {
                    bsonType: "string",
                    enum : ["frameless", "acetate", "metallic"],
                    description: "Must be either frameless, acetate, or metallic"},
                  frame_colour: {bsonType : "string", description: "This field must be a string"},
                  colourLglass: {bsonType : "string", description: "This field must be a string"},
                  colourRglass: {bsonType : "string", description: "This field must be a string"},
                  graduationL: {bsonType : "double", description: "This field must be a number with two decimal value"},
                  graduationR: {bsonType : "double", description: "This field must be a number with two decimal value"},
                  price: {bsonType : "double", description: "This field must be a number with two decimal values"},
                  orderDate: {bsonType : "date", description: "This field must be a valid date"}
                }
              }
            }
          }
       }
    }
})

db.createCollection("suppliers", {
  validator: {
     $jsonSchema: {
        bsonType: "object",
        required: ['supplier_name', 'supplier_address', 'supplier_phone', 'supplier_email', 'supplier_tax_id', 'supplier_brands'],
        title: "Supplier Entry Validation",
        properties: {
          supplier_name: {bsonType : "string", description: "This field must be a string"},
          supplier_address: {
            bsonType: "object",
            required: ['street_address', 'floor_and_office', 'borough', 'country', 'postal_code'],
            properties : {
              street_address: {bsonType : "string", description: "This field must be a string"},
              floor_and_office: {bsonType : "string", description: "This field must be a string"},
              borough: {bsonType : "string", description: "This field must be a string"},
              country: {bsonType : "string", description: "This field must be a string"},
              postal_code: {bsonType : "string", description: "This field must be a string"},
              address_notes: {bsonType : "string", description: "This field must be a string"},  
            }
          },
          supplier_phone: {bsonType : "string", description: "This field must be a string"},
          supplier_email: {bsonType : "string", description: "This field must be a string"},
          supplier_tax_id: {bsonType : "string", description: "This field must be a string"},
          supplier_brands: {
            bsonType : "array",
            items : {
              bsonType : "string", 
              description: "This field must be a string"},
          }  
        }
    }
  }
})

db.createCollection("glassesframes", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ['brand', 'frame_type', 'frame_colour', 'supplier_name', 'price_supplier'],
      title: "Glass Frame Entry Validation",
      properties: {
        brand: {
          bsonType : "string",
          enum : ["Rayban", "Kuboraum", "Etnia"], description: "Must be either Rayban, Kuboraum or Etnia"},
        frame_type: {
          bsonType : "string",
          enum : ["frameless", "acetate", "metallic"],
          description: "Must be either frameless, acetate, or metallic"},
        frame_colour: {bsonType : "string", description: "This field must be a string"},
        colourLglass: {bsonType : "string", description: "This field must be a string"},
        colourRglass: {bsonType : "string", description: "This field must be a string"},
        supplier_name: {
          bsonType : "string",
          enum : ["Barcelona Best Glasses", "Berlin Eyeware"],
          description: "Must be either Barcelona Best Glasses or Berlin Eyeware"},
        price_supplier: {bsonType : "double", description: "This field must be a number with two decimal values"},
      }
    }
  }
})