// 1. Escriu una consulta per mostrar tots els documents en la col·lecció Restaurants.
db.restaurants.find()

// 2. Escriu una consulta per mostrar el restaurant_id, name, borough i cuisine de tots els documents en la col·lecció Restaurants.
db.restaurants.find({}, {restaurant_id:1, name:1, borough:1, cuisine:1})

// 3. Escriu una consulta per mostrar el restaurant_id, name, borough i cuisine, però excloent el camp _id per tots els documents en la col·lecció Restaurants.
db.restaurants.find({}, {restaurant_id:1, name:1, borough:1, cuisine:1, _id:0})

// 4. Escriu una consulta per mostrar restaurant_id, name, borough i zip code, però excloent el camp _id per tots els documents en la col·lecció Restaurants.
db.restaurants.find({}, {restaurant_id:1, name:1, borough:1, "address.zipcode":1, _id:0})

// 5. Escriu una consulta per mostrar tots els restaurants que estan en el Bronx.
db.restaurants.find({borough : "Bronx"})

// 6. Escriu una consulta per mostrar els primers 5 restaurants que estan en el Bronx.
db.restaurants.find({borough : "Bronx"}).limit(5)

// 7. Escriu una consulta per mostrar els 5 restaurants després de saltar els primers 5 que siguin del Bronx.
db.restaurants.find().skip(5).limit(5)

// 8. Escriu una consulta per trobar els restaurants que tenen algun score més gran de 90.
db.restaurants.find({"grades.score" : {$gt : 90}})


// 9. Escriu una consulta per trobar els restaurants que tenen un score més gran que 80 però menys que 100.
db.restaurants.find({grades : {$elemMatch : {score : {$gt : 80, $lt : 100}}}})
//db.restaurants.find({"grades.score" : {$gt : 80, $lt : 100}}) ; *** PROBLEM *** It's returning 1 document that doesn't match criteria : ObjectId('66fae71f864c12adec9075c1')

/* 9.A : Buscar restaurantes con TODOS los scores en el rango dado.
No da ningún resultado.*/
db.restaurants.find({grades : [{elemMatch : {score: {$gt : 80, $lt : 100}}}]})

/* 9.B : Buscar restaurantes que no tengan NINGÚN score dentro del rango
Esta instrucción FUNCIONA y da un único resultado.*/
{grades : {$all : [{$elemMatch : {score : {$lt : 80}}}, {$elemMatch : {score : {$gt : 100}}}]}}

/*
SOLUTION :
https://youtu.be/zFzR2mCHhTk?si=cvYOkgl_xTeRP8W9 (querying nested documents)
https://www.mongodb.com/docs/manual/reference/operator/query/elemMatch/
*/

// 10. Escriu una consulta per trobar els restaurants que estan situats en una longitud inferior a -95.754168.
db.restaurants.find({"address.coord.0" : {$lt : -95.754168}})

// 11. Escriu una consulta de MongoDB per a trobar els restaurants que no cuinen menjar 'American ' i tenen algun score superior a 70 i latitud inferior a -65.754168.
db.restaurants.find({cuisine : {$ne : "American "}, "grades.score" : {$gt : 70}, "address.coord.1" : {$lt : -65.754168}})
// OK getting an empty query, there are not restaurants matching lat < -65.754168

// 12. Escriu una consulta per trobar els restaurants que no preparen menjar 'American' i tenen algun score superior a 70 i que, a més, es localitzen en longituds inferiors a -65.754168. Nota: Fes aquesta consulta sense utilitzar operador $and.
db.restaurants.find({cuisine : {$ne : "American "}, "grades.score" : {$gt : 70}, "address.coord.0" : {$lt : -65.754168}})

// 13. Escriu una consulta per trobar els restaurants que no preparen menjar 'American ', tenen alguna nota 'A' i no pertanyen a Brooklyn. S'ha de mostrar el document segons la cuisine en ordre descendent.
db.restaurants.find({cuisine : {$ne : "American "}, "grades.grade" : "A", borough : {$ne : "Brooklyn"}}).sort({cuisine : -1})

// Strings : https://www.mongodb.com/docs/manual/reference/operator/query/text/
// $regex : https://www.mongodb.com/docs/manual/reference/operator/query/regex/
// Any place : "text"
// Starting with : "^text"
// Ending with : "text$"

// 14. Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que contenen 'Wil' en les tres primeres lletres en el seu nom.
db.restaurants.find({name: {$regex: "^Wil", $options: "i"}},{_id:0, restaurant_id:1, name:1, borough:1, cuisine:1})

// 15. Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que contenen 'ces' en les últimes tres lletres en el seu nom.
db.restaurants.find({name: {$regex: "ces$", $options: "i"}},{_id:0, restaurant_id:1, name:1, borough:1, cuisine:1})

// 16. Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que contenen 'Reg' en qualsevol lloc del seu nom.
db.restaurants.find({name: {$regex: "Reg", $options: "i"}},{_id:0, restaurant_id:1, name:1, borough:1, cuisine:1})

// 17. Escriu una consulta per trobar els restaurants que pertanyen al Bronx i preparen plats Americans o xinesos.
db.restaurants.find({borough: "Bronx", cuisine:{$in : ["American", "Chinese"]}})
// Query is fine!!! There are no "American" cuisine restaurants in the Bronx ?! ha ha ha

// 18. Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per aquells restaurants que pertanyen a Staten Island, Queens, Bronx o Brooklyn.
db.restaurants.find({borough : {$in : ["Staten Island", "Queens", "Bronx", "Brooklyn"]}},{_id:0, restaurant_id:1, name:1, borough:1, cuisine:1})

// 19. Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que NO pertanyen a Staten Island, Queens, Bronx o Brooklyn.
db.restaurants.find({borough : {$nin : ["Staten Island", "Queens", "Bronx", "Brooklyn"]}},{_id:0, restaurant_id:1, name:1, borough:1, cuisine:1})

// 20. Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que aconsegueixin una nota menor que 10.
db.restaurants.find({"grades.score":{$lt : 10}},{_id:0, retaurant_id:1, name:1, borough:1, cuisine:1})

// 21. Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que preparen marisc ('seafood') excepte si són 'American ', 'Chinese' o el name del restaurant comença amb lletres 'Wil'.
// Query OK, SeaFood restaurants are not offering either American or Chinese food !!!
db.restaurants.find({cuisine: {$in : ["Seafood"], $nin : ["American", "Chinese"]}, name : {$not: {$regex: "^Wil", $options: "i"}}} , {_id:0, restaurants_id:1, name:1, borough:1, cuisine:1})

// https://www.mongodb.com/docs/manual/tutorial/query-array-of-documents/
// https://www.mongodb.com/docs/manual/reference/operator/query/elemMatch/
// https://www.mongodb.com/docs/manual/tutorial/query-array-of-documents/#std-label-array-match-embedded-documents
// https://www.mongodb.com/docs/manual/reference/method/Date/

// 22. Escriu una consulta per trobar el restaurant_id, name i grades per a aquells restaurants que aconsegueixin un grade de "A" i un score d'11 amb un ISODate "2014-08-11T00:00:00Z".
// Matches ALL (place all inside same $elemMatch) : only 1 match, first element [0]
db.restaurants.find({grades : {$elemMatch : {grade : "A" , score : 11 , date : ISODate("2014-08-11T00:00:00Z")}}} , {_id:0, restaurant_id:1, name:1, grades:1})
// Looking specific for element [0] : (SAME RESULT, EXPERIMENT OK) THIS IS LIKE NEXT QUERY
db.restaurants.find({"grades.0.grade" : "A" , "grades.0.score" : 11 , "grades.0.date" : ISODate("2014-08-11T00:00:00Z")}} , {_id:0, restaurant_id:1, name:1, grades:1})

// 23. Escriu una consulta per trobar el restaurant_id, name i grades per a aquells restaurants on el 2n element de l'array de graus conté un grade de "A" i un score 9 amb un ISODate "2014-08-11T00:00:00Z".
/*
Matches ALL (place all inside same $elemMatch) : Like QUERY 22. Outcome : 2 matches, one of them for second element [1]
db.restaurants.find({grades : {$elemMatch : {grade : "A" , score : 9 , date : ISODate("2014-08-11T00:00:00Z")}}} , {_id:0, restaurant_id:1, name:1, grades:1})
*/
// Must matches ALL for second nested document (grades.1). We don't use elemMatch :
db.restaurants.find({"grades.1.grade" : "A" , "grades.1.score" : 9 , "grades.1.date" : ISODate("2014-08-11T00:00:00Z")}} , {_id:0, restaurant_id:1, name:1, grades:1})

// https://www.mongodb.com/docs/manual/reference/operator/aggregation/dateTrunc/

// 24. Escriu una consulta per trobar el restaurant_id, name, adreça i ubicació geogràfica per a aquells restaurants on el segon element de l'array coord conté un valor entre 42 i 52.
db.restaurants.find({"address.coord.1" : {$gte:42, $lte:52}},{_id:0, restaurant_id:1, name:1, address:1, borough:1})

// 25. Escriu una consulta per organitzar els restaurants per nom en ordre ascendent.
db.restaurants.find().sort(name:1)

// 26. Escriu una consulta per organitzar els restaurants per nom en ordre descendent.
db.restaurants.find().sort(name:-1)

//https://www.mongodb.com/docs/compass/current/query/sort/
// 27. Escriu una consulta per organitzar els restaurants pel nom de la cuisine en ordre ascendent i pel barri en ordre descendent.
db.restaurants.find().sort({cuisine:1, borough:-1})

// https://www.geeksforgeeks.org/how-to-query-for-is-not-null-in-mongodb-in-a-specific-field/
//https://www.mongodb.com/docs/manual/tutorial/query-for-null-fields/#std-label-faq-developers-query-for-nulls
// 28. Escriu una consulta per saber si les direccions contenen el carrer.
db.restaurants.find({"address.street" : {$ne : null}})

// https://www.mongodb.com/docs/manual/reference/operator/query/type/
// 29. Escriu una consulta que seleccioni tots els documents en la col·lecció de restaurants on els valors del camp coord és de tipus Double.
db.restaurants.find({"address.coord" : {$type : "double"}})

// 30. Escriu una consulta que seleccioni el restaurant_id, name i grade per a aquells restaurants que retornen 0 com a residu després de dividir algun dels seus score per 7.
// Arreglado!... Estaba dando por bueno divisor=0 (grade.score = 0)
db.restaurants.find({"grades.score" : {$mod: [7,0], $ne : 0}},{_id:0, restaurants_id:1, name:1, grade:1})

// 31. Escriu una consulta per trobar el name de restaurant, borough, longitud, latitud i cuisine per a aquells restaurants que contenen 'mon' en algun lloc del seu name.
db.restaurants.find({name : {$regex : "mon", $options: "i"}},{_id:0, name:1, borough:1, "address.coord":1, cuisine:1})

// 32. Escriu una consulta per trobar el name de restaurant, borough, longitud, latitud i cuisine per a aquells restaurants que contenen 'Mad' com a primeres tres lletres del seu name.
db.restaurant.find({name : {$regex: "^Mad", $options: "i"}},{_id:0, name:1, borough:1, "address.coord":1, cuisine:1})